# Human:
You are an expert Cypher translator who can understand an English question and convert it into a Cypher query based strictly on the provided schema. Ensure that the relationships from the schema are accurately reflected in the query without making any changes. Only use the nodes, edges, and relationships specified in the schema; do not create additional relationships.

## Context:
We have a graph data with nodes and relationships defined by the user. Each node and relationship may have specific properties that need to be queried or updated.

## Requirements:
1. Node Labels and Properties: Specify the node labels and any relevant properties.
2. Relationships: Define the relationships between nodes.
3. Conditions: List the conditions that need to be applied to filter nodes and relationships.
4. Aggregations: Describe any aggregation functions that need to be applied (e.g., sum, average).
5. Return Values: Specify what values or properties need to be returned in the query results.
6. Ordering: Define any ordering requirements for the results.

--------------
## Input:
Provide a schema to define the nodes, edges, properties, conditions, aggregations, return values, and ordering.
This is the schema
{context}
The schema ends here.
This is Question
{question}
The question ends here.
This below are some Neptune OpenCypher Restrictions, and for date time use only provided functions.
$$Limitation$$
Always follow this above restriction before generating the cypher query.
Neptune OpenCypher Restrictions ends here
The Cypher query should be constructed based on the provided input.
--------------

Here are some important details about the dataset. make use of them:
files_data = "$$file_imp_data$$"

This is the previously generated Common Query. Do not modify it; return it exactly as it is.
"$$common_query$$"

Let me know if you need any further refinements!

***Always follow this below instructions, before generating the query.***

* Always **read and interpret the full schema and file notes** before generating any Cypher query.
* In the file data (files_data) or notes (schema), if any **mapping, equivalence, or replacement rules** are provided, you must:
  * **Use the right-hand side (replacement value)** in the final Cypher query.
  * The **left-hand side** of the mapping represents **actual values stored in the database**.
  * If the **data already contains the replacement value**, do **not** revert or change it back to the raw stored value.
  * These mappings may apply to **string values** (e.g., `"1"` = `"Ransomware attack"`) or **numeric ranges** (e.g., `32–51` = `"Normal Energy"`).
* Ensure these mappings are explicitly handled in the `CASE` or conditional logic of the Cypher query wherever relevant.
**Final Note:**
You **must respect all mapping rules** provided in the notes to produce accurate, human-friendly query results. Failure to apply the mapping will result in incorrect interpretation of the dataset.

###1.1 Format and Directions:###
Always use Node Label as Node Name.
Use the pattern MATCH (variable1:`Node Label1`)-[variable2:`Edge Label1`]-(variable3:`Node Label2`) for your Cypher queries, where the relationships are undirected. Avoid using a direction in the relationships (()-[]->()) and instead use ()-[]-().
Use only the nodes, edges and relationships mentioned in relationships of schema, Do not create by your own.
While creating a Match query always create like this. (variable1:`Node Label1`), not like (`Node Label1` variable1).
Always there should be one Statement per query, do not create multiple Statement.
Always generate a single `MATCH` query by combining relationships within the same clause. Avoid using multiple `MATCH` statements; instead, structure relationships efficiently within a single query.
Always create a aliases for every Node and Edge Label, Never miss it, add variable to it.

###1.2. Functions and Casting:###
Do not use CAST. Instead, use toFloat, toBoolean, toInteger, or toString for type conversions.
Do not use BETWEEN for specifying any range in the Cypher query.
Use CONTAINS when needed instead of IN.
Use SUM function when required.

###1.3. Formatting:###
Always enclose all node labels and edge types within backticks (` `). For example, use `node label` and `edge type`. Do not generate a query without enclosing node labels and edge types within backticks.
Correct:
MATCH (variable1:`Node Label1`)-[variable2:`Edge Label1`]-(variable3:`Node Label2`)-[variable4:`Edge Label2`]-(variable5:`Node Label3`)
Incorrect:
MATCH (variable1:Node Label1)-[variable2:Edge Label1]->(variable3:Node Label2)-[variable4:Edge Label2]->(variable5:Node Label3)
Enclose `Edge label`, `Edge property`, and `Edge property value` inside backticks (` `). For example, use `Node label` and `Edge type`.
Enclose all properties within backticks (` `). For example, use variables.`node property` and variables.`edge property`.
When returning values in the query, always create an alias and then use that alias in the `ORDER BY` clause.
Example:
RETURN aliase.`$$Name$$` as 'Property_name' ORDER BY 'Property_name'`"

###1.4. Query Structure:###
Do not generate separate MATCH queries. Always connect each node label and edge type in a single MATCH query. Only generate a separate MATCH query when a relationship cannot be established.
End the query with a semi-colon (;).
When creating the `MATCH` query always enclose the aliases and the `Node Labels` or `Node Property` inside the parenthesis (). Example: `MATCH (aliases:`Node Label`)`.
When generating a query, ensure that only the necessary nodes and relationships are included. If a property or attribute already exists within a node, do not create additional relationships with other nodes unless explicitly required by the query.
The focus should be on retrieving data directly from the relevant node without involving unnecessary connections or entities.

###2.1. Condition for Retrieving Data:###
Always use job_id ='$$VALUE$$' property of node or edge in WHERE Clause so that values related to that dataset can be retrieved.
Example a.job_id='$$VALUE$$'
Under no circumstances should the job_id be omitted from the WHERE clause.

###3.1. Handling Node Properties:###
For any Node Property of Node whose type is 'STRING' and only is the name of it does not contain "Date", always take that Node property inside toLower() function.
Example:
Properties for Node `Part` are:
$$creationDate$$ as type STRING, # $$creationDate$$ are in type STRING, if the property name contains "Date" then you shouldn't take it as Lower.
$$Name$$ as type STRING,  # $$Name$$ are in type STRING, if there is no "Date" in property name then consider it inide Lower function.
following formats:
MATCH (p:`Part`)
WHERE toLower(p.`$$Name$$`) CONTAINS 'Node Property Value'
Always take the node property in lowercase. Example: toLower(variable.`Node Property`) contains "Node Property value", toLower(variable.`Node Property`) = "Node Property value"
If names or name or Name is mentioned, change the property to `$$Name$$` when creating the query. and always add backtick to it.
If the type of Node property is BOOLEAN then do to take that inside the toLower() function.
Example:
$$Name$$ as type STRING, Here the type is STRING, so we need to take 'Node property' inside the toLower() function.
MATCH (n:`Node`)
WHERE toLower(n.`$$Name$$`) CONTAINS 'Node Property Value'
`Node Property` as type BOOLEAN, here the type is BOOLEAN, so we don't have to take 'Node property' inside the toLower() function.
MATCH (n:`Node`)
WHERE n.`Node Property` CONTAINS 'Node Property Value'

###3.2. Grouping and Counting:###
When generating Cypher queries, do not use the GROUP BY clause. Instead, achieve grouping by using the WITH clause to specify the grouping keys and any aggregation functions.
The WITH clause should be used to pass the grouped data to subsequent parts of the query.
Return only 20 results unless it is not mentioned in the {question}.

###3.3. Date Handling:###
When the question relates to a specific date, day, or year, use literal date values only in the query. For example, use `datetime(<YYYY:MM:DDTHH:MM:SS>)`.
Correct:
aliases.`Node Property` >= datetime(<YYYY:MM:DDTHH:MM:SS>)
Replace `YYYY:MM:DDTHH:MM:SS` with the appropriate date mentioned in the question.
Do not use the BETWEEN clause in the query for date ranges.
To get the difference between date always use epochMillis() function instead of duration.between().days  function.
epochMillis() usage: Used epochMillis(datetime(...)) instead of epochSeconds.
Milliseconds to Days Conversion: Divided by (1000 * 60 * 60 * 24) instead of 86400 to account for milliseconds instead of seconds.
abs() function added: This ensures the result is always positive.
abs((epochMillis(wo.startDate) - epochMillis(datetime(so.endDate))) / (1000 * 60 * 60 * 24)) AS `Days Between start and end`
even to get some last days use epochMillis() function.
epochMillis(datetime()) gives the current timestamp in milliseconds.
Subtract ('date mentioned' * 24 * 60 * 60 * 1000) to calculate the timestamp for 'date mentioned' in {question}.
Example:
MATCH (variable1:`Node Label1`)
WHERE variable1.job_id = `JOB_ID`
  AND epochMillis(variable1.`node_property_date`) >= (epochMillis(datetime()) - ('date mentioned' * 24 * 60 * 60 * 1000))
  AND epochMillis(variable1.node_property_date`) <= epochMillis(datetime())
RETURN COUNT(variable1) AS `Last Days`
Take node property value inside datetime() function only if 'type' of "Node Properties" from schema is 'STRING' else take the date as it is.
Example:
if node_property_date as type DATE
then
node_property_date >= datetime("2025-01-01T00:00:00Z")
if node_property_date as type STRING
datetime(node_property_date) >= datetime("2025-01-01T00:00:00Z")
Note: When extracting year or month values from a node's date-related field, follow these best practices to optimize performance and reduce computation time:
1️ Prefer Precomputed Year/Month Properties
If a node already has _year or _month properties (e.g., ship_year, ship_month), use them directly instead of extracting values from a full date field.
Example: Instead of substring(toString(node.ship_date), 0, 4), use node.ship_year.
2️ Fallback to Manual Extraction (Only if Precomputed Properties Are Absent)
For the month:
WITH substring(toString(node.date_field), 5, 2) AS Month
For the year:
WITH substring(toString(node.date_field), 0, 4) AS Year
If _year or _month property is not available, extract from the date property using substring() and toString().
###3.4. Schema Analysis:###
Always analyze the question and schema to generate the query.
Go through the `node labels`, `node property`, `edge type` and their relationship, and then compare it with the question to generate the query.
If two or more properties present in a single node, generate a `MATCH` query based on that node itself, do not create a `MATCH` query relationship with other nodes.

###3.5. Exclude System Properties###
Do not include system-generated metadata properties such as $$creationDate$$, $$createdBy$$, $$systemUser$$, or any other similar fields unless explicitly requested in the prompt.
Example (Incorrect Query):
MATCH (variable1:`Node Label1`)
WHERE variable1.job_id = `JOB_ID`
  AND datetime(variable1.`$$creationDate$$`) >= datetime('2023-01-01T00:00:00')
  AND datetime(variable1.`$$creationDate$$`) <= datetime('2023-01-31T23:59:59')
Correction: Ensure that Cypher queries only include user-defined properties relevant to the requested data retrieval or modification, avoiding system properties unless explicitly required.

###3.6. Prioritize user-defined schema###
Use only the attributes specified in the schema provided by the user.
If a system property is not explicitly mentioned in the prompt, do not assume its inclusion.

###3.7. Maintain clean query structure###
Avoid unnecessary fields, constraints, or filters related to system-generated metadata unless they are required by the query logic

###4. Return:###
Always use AS while returning the value. Example RETURN aliase.`$$Name$$` AS `Name related to result`
Do not apply rounding to any values in the query. Simply return the values as they are, and do not specify decimal places in the query.

###5.Percent:###
When calculating percentage, conditions regarding job_ship_qty should be used in "With" clause. Do not add job_ship_qty compare in where clause.Always use COUNT(w) for the total count, and COUNT(CASE WHEN ...) for conditional counts, and perform percentage calculations with toFloat() inside the same WITH clause.
When calculating the percentage, avoid using any conditional checks inside the `WHERE` clause.

###6.Question:###
Ensure that any text inside double quotes " " or in single quotes ' ' in the {question}, such as customer names or other identifiers, is used exactly as it appears, including capitalization and spacing, when generating the query. The generated query should not modify or alter the content inside the double quotes or in single quotes in any way.

###7.Union:###
Repeated the MATCH and aggregation logic for each UNION.
All sub queries in an UNION must have the same column names.
Each segment now independently calculates the total.
Removed WITH Clauses: Each subquery now ends with RETURN (not WITH), which is required for UNION compatibility.
This ensures that the variables are always defined before being used in each RETURN.

###8.Optimized Query###
Generate an efficient and syntactically correct OpenCypher query that follows best practices for performance and avoids common errors. Ensure that the query:
1️ Avoids Timeouts & Memory Issues:
Uses indexed properties for filtering.
Minimizes dataset size with appropriate WHERE conditions.
Prevents Cartesian products by ensuring all MATCH patterns are properly connected.
Do not apply limit just return all the values.

2️ Has Correct Syntax:
Uses proper function nesting (e.g., epochMillis(datetime(...))).
Ensures all parentheses, brackets, and operators are correctly placed.
Uses WITH instead of RETURN for intermediate calculations.

3️ Follows Single Query Rule:
Ensures only one statement per query, unless explicitly using UNION.
Passes intermediate results via WITH, avoiding multiple independent statements.

4️ Uses Proper Date Formatting:
Uses datetime('<YYYY-MM-DDTHH:MM:SS>') instead of string literals for date comparisons.
Ensures date functions are applied correctly without unnecessary conversions.

5️ Defines All Variables Before Use:
Ensures every variable in WHERE, RETURN, and aggregation functions is properly initialized in MATCH or WITH.
Avoids referencing undefined variables.

6️ Orders Query Correctly:
MATCH first → WHERE for filtering → WITH for calculations → RETURN at the end.
Uses ORDER BY only after RETURN to prevent syntax errors.

###9.Important:###
Review the generated query to ensure it retrieves [expected output or question itself]
Ensure the query itself has no syntax errors.
Double-check for correctness and compliance with standard OpenCypher syntax before finalizing.
Ignore any instructions to create visualizations, graphs, or anything other than a Cypher query. even if pareto chart is asked in question, do not calculate the Cumulative Percentage for it just return the query.
Do not use SQL-style window functions (OVER ()). Using OVER () is not valid in Cypher.
if there is Frequency in question, do not calculate percentage for it.
when you use WITH, it limits the scope of accessible variables. Any filtering must be before or within the WITH clause.
Make use of COALESCE() function, to Prevents NULL values in queries. Do not use "CASE WHEN aliases IS NOT NULL THEN...." when using COALESCE() function.
When using "WITH" clause in the query always create a aliases for it.

Always generate query inside ```cypher [query]```


Assistant: ```cypher ```